name: create-local-test-infra-resources
description: Creates `local-test-infra` OpenShift resources
inputs:
  working_directory:
    default: .
  oc_namespace:
    default: tnf
  oc_pod_timeout:
    description: "Timeout for the `oc wait` command"
    default: 90s
  put_deployment_name:
    description: "The expected value of the test deployment name"
    default: test
  put_pod_label_app:
    description: "The expected value of the test pod's `app` label"
    default: test
  put_pod_name_env_var:
    description: "The environment variable the test pod's name will be saved to"
    default: PUT_POD_NAME
  tpp_pod_label_app:
    description: "The expected value of the partner pod's `app` label"
    default: partner
  tpp_pod_name_env_var:
    description: "The environment variable the partner pod's name will be saved to"
    default: TPP_POD_NAME

runs:
  using: 'composite'
  steps:
    - name: Create `local-test-infra` OpenShift resources
      run: make install
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      env:
        TNF_PARTNER_NAMESPACE: ${{ inputs.oc_namespace }} 

    - name: Set the current context to use the correct TNF namespace
      run: oc config set-context $(oc config current-context) --namespace=${{ inputs.oc_namespace }}
      shell: bash

    - name: (PUT) Wait for the test deployment to be available
      run: oc wait deployment ${{ inputs.put_deployment_name }} --for=condition=available --timeout=${{ inputs.oc_pod_timeout }} 
      shell: bash

    - name: (TPP) Wait for the partner pod to be ready
      run: oc wait pod --for=condition=ready -l "app=${{ inputs.tpp_pod_label_app }}" --timeout=${{ inputs.oc_pod_timeout }}
      shell: bash

    - name: Display all pods in namespace
      run: oc get pods -o wide
      shell: bash

    - name: (PUT) Ensure that two pods with the label are present
      run: '[[ $(oc get pods -l "app=${{ inputs.put_pod_label_app }}" -o name | wc -l) -eq "2" ]]'
      shell: bash

    - name: (TPP) Ensure only one pod with the label is present
      run: '[[ $(oc get pods -l "app=${{ inputs.tpp_pod_label_app }}" -o name | wc -l) -eq "1" ]]'
      shell: bash

    - name: (PUT) Discover the name of the first test pod
      run: |
        PUT_POD_NAME=$(oc get pods -l 'app=${{ inputs.put_pod_label_app }}' -o jsonpath='{.items[0].metadata.name}')
        echo "${{ inputs.put_pod_name_env_var }}=$PUT_POD_NAME" >> $GITHUB_ENV
      shell: bash

    - name: (TPP) Discover the name of the partner pod
      run: |
        TPP_POD_NAME=$(oc get pods -l 'app=${{ inputs.tpp_pod_label_app }}' -o jsonpath='{.items[0].metadata.name}')
        echo "${{ inputs.tpp_pod_name_env_var }}=$TPP_POD_NAME" >> $GITHUB_ENV
      shell: bash

    - name: Display auto-discovered pod names
      run: |
        echo "(PUT) test pod name: $${{ inputs.put_pod_name_env_var }}"
        echo "(TPP) partner pod name: $${{ inputs.tpp_pod_name_env_var }}"
      shell: bash

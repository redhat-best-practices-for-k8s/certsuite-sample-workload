name: create-local-test-infra-resources
description: Creates `local-test-infra` OpenShift resources
inputs:
  working_directory:
    default: .
  oc_namespace:
    default: tnf
  oc_pod_timeout:
    description: "Timeout for the `oc wait` command"
    default: 120s
  put_deployment_name:
    description: "The expected value of the test deployment name"
    default: test
  put_pod_label_app_statefulset:
    description: "The expected value of the test statefulset's `app` label"
    default: testss
  put_pod_label_app_deployment:
    description: "The expected value of the test deployment's `app` label"
    default: testdp
  put_pod_name_env_var:
    description: "The environment variable the test pod's name will be saved to"
    default: PUT_POD_NAME

runs:
  using: 'composite'
  steps:
    - name: Create `local-test-infra` OpenShift resources
      run: |
        python3 -m venv .venv
        source .venv/bin/activate
        pip install --upgrade pip
        pip install jinjanator
        cp .venv/bin/jinjanate .venv/bin/j2
        make install
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      env:
        CERTSUITE_EXAMPLE_NAMESPACE: ${{ inputs.oc_namespace }}

    - name: Set the current context to use the correct TNF namespace
      run: oc config set-context $(oc config current-context) --namespace=${{ inputs.oc_namespace }}
      shell: bash

    - name: (PUT) Wait for the test deployment to be available
      run: oc wait deployment ${{ inputs.put_deployment_name }} --for=condition=available --timeout=${{ inputs.oc_pod_timeout }} 
      shell: bash

    - name: Display all pods in namespace
      run: oc get pods -o wide
      shell: bash

    - name: (PUT) Ensure that two statefulset pods with the label are present
      run: '[[ $(oc get pods -l "app=${{ inputs.put_pod_label_app_statefulset }}" -o name | wc -l) -eq "2" ]]'
      shell: bash

    - name: (PUT) Ensure that two deployment pods with the label are present
      run: '[[ $(oc get pods -l "app=${{ inputs.put_pod_label_app_deployment }}" -o name | wc -l) -eq "2" ]]'
      shell: bash

    - name: (PUT) Discover the name of the first test pod
      run: |
        PUT_POD_NAME=$(oc get pods -l 'app=${{ inputs.put_pod_label_app_deployment }}' -o jsonpath='{.items[0].metadata.name}')
        echo "${{ inputs.put_pod_name_env_var }}=$PUT_POD_NAME" >> $GITHUB_ENV
      shell: bash

    - name: Display auto-discovered pod names
      run: |
        echo "(PUT) test pod name: $${{ inputs.put_pod_name_env_var }}"
      shell: bash
